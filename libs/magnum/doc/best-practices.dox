/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017
              Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page best-practices Best practices, pitfalls and platform-specific information

@brief Performance advices and solutions for platform-specific issues

@tableofcontents

Here is collection of carefully selected notes, links to official guidelines
and other articles with valuable information to help developers create better
applications. Feel free to add one, if it contains new unique information.

@section best-practices-gles GLES-specific

-   Rendering to RGB textures doesn't work on many platforms, either due to
    alignment issues or other factors. For example it is not possible to render
    to @ref TextureFormat::RGB8 on iOS (but it works elsewhere); rendering to
    @ref TextureFormat::RGB32F is not possible even on NVidia. Use RGBA formats
    instead.
-   [Writing Portable OpenGL ES 2.0](https://www.khronos.org/assets/uploads/developers/library/2011-siggraph-mobile/Writing-Portable-OpenGL-ES-2.0_Aug-11.pdf)

@section best-practices-platform Platform-specific

Some platforms need special care, see their respective sections for more
information.

@subsection best-practices-mac macOS

-   @ref AbstractShaderProgram::validate() expects that the shader has a
    properly configured framebuffer bound along with proper @ref Renderer
    setup. That is often hard to achieve, so the function cannot be portably
    used for shader validity testing.
-   `GL_TIMESTAMP` used by @ref TimeQuery::timestamp() is not implemented on
    macOS and gives zero results.
-   [Best Practices for Working with Vertex Data](https://developer.apple.com/library/mac/#documentation/graphicsimaging/Conceptual/OpenGL-MacProgGuide/opengl_vertexdata/opengl_vertexdata.html)
-   [Best Practices for Working with Texture Data](https://developer.apple.com/library/mac/#documentation/graphicsimaging/Conceptual/OpenGL-MacProgGuide/opengl_texturedata/opengl_texturedata.html)

@subsection best-practices-ios iOS

-   GLSL `texelFetch()` returns zero results if you have a texture with integer
    type and the filtering is not @ref Sampler::Filter::Nearest. Yes, it
    shouldn't matter, but it does.
-   OpenGL ES 3.0 contexts don't support rendering to 32-bit float textures.
    However, it is possible to work around that issue by creating 32-bit
    unsigned integer texture
-   [Best Practices for Working with Vertex Data](http://developer.apple.com/library/ios/#documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/TechniquesforWorkingwithVertexData/TechniquesforWorkingwithVertexData.html)
-   [Best Practices for Working with Texture Data](http://developer.apple.com/library/ios/#documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/TechniquesForWorkingWithTextureData/TechniquesForWorkingWithTextureData.html)
-   [Best Practices for Shaders](http://developer.apple.com/library/ios/#documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/BestPracticesforShaders/BestPracticesforShaders.html#//apple_ref/doc/uid/TP40008793-CH7-SW3)

@subsection best-practices-angle ANGLE (WebGL)

-   [WebGL Insights -- ANGLE](https://books.google.cz/books?id=6crECQAAQBAJ&lpg=PP1&pg=PA3&redir_esc=y#v=onepage&q&f=true)

@subsection best-practices-webgl WebGL (Emscripten)

WebGL is subset of OpenGL ES with some [specific restrictions and features](http://www.khronos.org/registry/webgl/specs/latest/1.0/#6),
namely requirement for unique buffer target binding, aligned buffer offset and
stride and some other restrictions and also support for combined depth/stencil
buffer attachments. See @ref Buffer, @ref Framebuffer,
@ref Texture::setSubImage() "*Texture::setSubImage()", @ref Mesh::addVertexBuffer(),
@ref Renderer::setStencilFunction(), @ref Renderer::setStencilMask() and
@ref Renderer::setBlendFunction() documentation for more information.

@section best-practices-hw Hardware-specific

@subsection best-practices-intel Intel hardware

-   [Performance tuning applications for Intel Graphics for Linux and Chrome OS](http://software.intel.com/sites/default/files/Performance-tuning-applications-for-Intel-GEN-Graphics-for-Linux-and-Google-Chrome-OS.pdf) [PDF]

@subsection best-practices-powervr PowerVR hardware

-   [PowerVR Performance Recommendations](https://github.com/burningsun/pecker_framework/blob/master/参考资料/PowerVR.Performance%20Recommendations.pdf?raw=true) [PDF]

@subsection best-practices-amd AMD hardware

-   [ATI Radeon HD 2000 programming guide](http://developer.amd.com/wordpress/media/2012/10/ATI_Radeon_HD_2000_programming_guide.pdf)

@subsection best-practices-tegra NVidia Tegra hardware

-   [Optimize OpenGL ES 2.0 Performance for Tegra](http://docs.nvidia.com/tegra/index.html#GLES2_Perf_Main.html)

*/
}
