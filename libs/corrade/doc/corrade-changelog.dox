/*
    This file is part of Corrade.

    Copyright © 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
                2017 Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Corrade {

/** @page corrade-changelog Changelog

@tableofcontents

@section corrade-changelog-latest Changes since 2015-05 snapshot

## Dependency changes

-   Completely removed NaCl support (see https://blog.chromium.org/2017/05/goodbye-pnacl-hello-webassembly.html)
-   Dropped support for the old MinGW32 (only MinGW-w64 is supported now)
-   Bumped minimal CMake version to 2.8.12
-   Removed support for OSX 10.8 and older
-   Dropped the `compatibility` branch and all support for MSVC 2013 and GCC <
    4.7

## New features

-   MSVC 2015 and 2017 support in `master` branch. It needs some workarounds,
    thus the compatibility is controlled using `MSVC2015_COMPATIBILITY` /
    `MSVC2017_COMPATIBILITY` CMake option, which is then exposed as
    @ref CORRADE_MSVC2015_COMPATIBILITY / @ref CORRADE_MSVC2017_COMPATIBILITY
    CMake variable and preprocessor macro.
-   Windows RT (Store/Phone) support. Builds for that platform have
    @ref CORRADE_TARGET_WINDOWS_RT CMake variable and preprocessor macro
    defined.
-   iOS support, integration of @ref TestSuite with Xcode XCTest
-   WebAssembly support when building for Emscripten

### Containers library

-   New @ref Containers::StaticArray class, similar to @ref Containers::Array
    but with stack-allocated storage of compile-time size
-   New @ref Containers::StaticArrayView class, similar to @ref Containers::ArrayView
    but with compile-time size information
-   Added @ref Containers::NoInit, @ref Containers::DirectInit,
    @ref Containers::DefaultInit, @ref Containers::ValueInit and
    @ref Containers::InPlaceInit tags for better control over initialization of
    @ref Containers::Array and @ref Containers::StaticArray
-   Added @ref Containers::Array::Array(InPlaceInitT, std::initializer_list<T>)
    to create @ref Containers::Array from an initializer list
-   New @ref Containers::Array::Array(T*, std::size_t, D) "Containers::Array::Array(T*, std::size_t, D)"
    constructor that allows wrapping externally allocated array with custom
    deleter function
-   New @ref Containers::arrayView() and @ref Containers::staticArrayView()
    helper functions to make @ref Containers::ArrayView / @ref Containers::StaticArrayView
    instances without needing to fully specify the type (similarly to what
    `std::make_tuple()` is to `std::tuple`)
-   New @ref Containers::arrayCast() function to `reinterpret_cast` arrays with
    correct size recalculation
-   New @ref Containers::arraySize() helper function for easier size queries
    on array-like types
-   Added XOR operators to @ref Containers::EnumSet
-   New @ref Containers::enumSetDebugOutput() utility to help with implementing
    debug operators for @ref Containers::EnumSet types

### PluginManager library

-   Name passed to plugin constructors is now the aliased name instead of the
    actual name, allowing the plugins to have different functionality based on
    name with which they are loaded (for example an image converter plugin can
    export different file format if it's loaded as `JpegImageConverter` or
    `PngImageConverter`). New @ref PluginManager::AbstractPlugin::plugin()
    function returns the aliased name.

### TestSuite library

-   Major update of @ref TestSuite library including colored output for more
    readable output, command-line arguments for fine-grained control,
    setup/teardown functions, instanced and repeated tests, benchmarks for
    wall and CPU time, CPU clock, custom benchmarks, ability to override test
    case name and description and more. See @ref TestSuite::Tester
    documentation for more information.
-   Ability to run @ref TestSuite tests on Android using ADB, with all relevant
    environment variables propagated to the device/emulator
-   Ability to run @ref TestSuite tests from within Xcode via XCTest
-   Added @ref TestSuite::Compare::Less, @ref TestSuite::Compare::LessOrEqual,
    @ref TestSuite::Compare::Greater, @ref TestSuite::Compare::GreaterOrEqual
    and @ref TestSuite::Compare::Around
-   Ability to bundle files with @ref corrade-cmake-add-test "corrade_add_test()"
    CMake macro for Android and Emscripten tests

### Utility library

-   Added @ref Utility::Arguments::setFromEnvironment(), making it possible to
    pass options via environment variables. List of all environment options is
    also available through @ref Utility::Arguments::environment() for debugging
    purposes, environment values are UTF-8 encoded on all platforms
-   Scoped output redirection in @ref Utility::Debug
-   Colored output in @ref Utility::Debug with scoping and both ANSI and
    Windows console API support; @ref Utility::Debug::isTty() for detecting
    whether colored output can be used
-   Added @ref Utility::Fatal output. Similar to @ref Utility::Error but exits
    with defined return code right after printing the message.
-   Added @ref Utility::Directory::isSandboxed(),
    @ref Utility::Directory::executableLocation(), @ref Utility::Directory::tmp(),
    @ref Utility::Directory::fromNativeSeparators() and
    @ref Utility::Directory::toNativeSeparators()
-   Added @ref Utility::Directory::map() and @ref Utility::mapRead() for
    mapping files into memory, works on non-RT Windows and all Unix-like
    systems
-   Added @ref Utility::Resource::hasGroup()
-   Added @ref Utility::Unicode::prevChar(), @ref Utility::Unicode::utf8()
-   Added @ref Utility::Unicode::widen() and @ref Utility::Unicode::narrow()
    helpers for interacting with Unicode Windows APIs
-   Added @ref CORRADE_TARGET_IOS and @ref CORRADE_TARGET_IOS_SIMULATOR
    macros and CMake variables
-   Added @ref CORRADE_TARGET_X86 and @ref CORRADE_TARGET_ARM macros
-   Added @ref CORRADE_DEPRECATED_FILE(), @ref CORRADE_DEPRECATED_ALIAS(),
    @ref CORRADE_ALIGNAS() and @ref CORRADE_NORETURN macros

## Changes and improvements

### Containers library

-   @ref Containers::EnumSet now can take a @ref Containers::NoInit tag to
    create an uninitialized value
-   Exposed @ref Containers::EnumSet::FullValue constant

### PluginManager library

-   @ref PluginManager::Manager now properly loads plugins from UTF-8 encoded
    paths also on Windows
-   @ref PluginManager::Manager can now be constructed without specifying
    plugin directory

### TestSuite library

-   @ref TestSuite::Compare::Container now prints contents of whole container
    instead of just the first difference
-   @ref TestSuite::Compare::File, @ref TestSuite::Compare::FileToString and
    @ref TestSuite::Compare::StringToFile now properly handles UTF-8 encoded
    filenames also on Windows
-   @ref CORRADE_EXPECT_FAIL_IF() now works also on types with explicit bool
    conversion

### Utility library

-   @ref Utility::Arguments::parse() can now be called with zero/null
    arguments
-   @ref Utility::Arguments::value() now takes
    @ref Utility::ConfigurationValueFlags for easier parsing of hexadecimal
    and other values
-   @ref Utility::Configuration is now able to properly load and save
    configuration files from UTF-8 encoded filenames also on Windows
-   Simpler implementation of @ref Utility::Debug operators, they now take the
    class by reference instead of by value
-   Ensuring that pointer values are printed by @ref Utility::Debug
    consistently on all platforms
-   Ensuring that floating-point values printed by @ref Utility::Debug have
    enough digits of precision based on their type
-   All @ref Utility::Directory functions now properly take and return UTF-8
    encoded paths on Windows
-   Implemented @ref Utility::Directory::configurationDir() and
    @ref Utility::Directory::home() on Emscripten, OSX and iOS with proper
    handling of sandboxed apps
-   @ref Utility::Resource and @ref corrade-cmake-add-resource "corrade_add_resource()"
    CMake macro now properly handle UTF-8 filenames on all platforms
-   Removed global constructors from @ref Utility::String internals
-   Added @ref Utility::Unicode::nextChar() overload that takes a char array
    view instead of a `std::string`

## Build system

-   Continuous testing for Linux, OSX, Windows MSVC, Windows MinGW, Windows RT,
    iOS, Android and Emscripten on [Travis CI](https://travis-ci.org/mosra/corrade)
    and [AppVeyor CI](https://ci.appveyor.com/project/mosra/corrade), with code
    coverage on [coveralls.io](https://coveralls.io/github/mosra/corrade);
    replacing the unmaintained and outdated Jenkins configuration
-   Support for CMake subprojects. You can now clone Corrade into a
    subdirectory in your project and add it using `add_subdirectory()`. The
    `find_package()` command will then use the CMake subproject instead of
    looking for it in system-wide locations.
-   Reworked CMake buildsystem to use the new imported target workflow, see
    @ref corrade-cmake for more information
-   CMake targets are now organized in folders for better development
    experience in IDEs such as Visual Studio or Xcode
-   Enabling `-Wmissing-prototypes` warning on Clang when
    `CORRADE_USE_PEDANTIC_FLAGS` property is enabled
-   It's now possible to build only parts of the library using `WITH_*` CMake
    options and `find_package()` needs to request particular parts of the
    library that are used; see @ref building-corrade and @ref corrade-cmake for
    more information
-   @ref corrade-cmake-add-plugin "corrade_add_plugin()" now properly installs
    plugin *.dll to `bin/` and *.lib to `lib/` on Windows
-   Added @ref building-corrade-packages-brew "Homebrew package"
-   Added @ref corrade-cmake-find-dlls-for-libs "corrade_find_dlls_for_libs()"
    CMake macro
-   `MACOSX_RPATH` is now enabled by default on CMake 3.0+
-   Enabling only C++ in CMake `project()` call, if possible, to speed up
    initial CMake run

## Bug fixes

-   @ref Containers::ArrayView::data() on non-const data now properly returns
    non-const pointer
-   Worked around function template merging on MSVC, which caused different
    signals being merged into one in @ref Interconnect library
-   Added a workaround to `interface` macro defined by `windows.h` that broke
    @ref PluginManager headers
-   Calling @ref CORRADE_EXPECT_FAIL() more than once in a single block caused
    multiple definition errors
-   Second row in @ref Utility::Arguments help output was not properly indented
    for named arguments
-   Prefixed @ref Utility::Arguments failed on encountering value starting with
    `-`
-   @ref Utility::Directory::mkpath() now properly returns `false` if path
    creation fails
-   Fixed @ref Utility::Directory::rm() for directories on Emscripten
-   Fixed unaligned reads and iterative digesting in @ref Utility::Sha1
-   Properly re-running CMake and updating dependencies when resource
    configuration file added by @ref corrade-cmake-add-resource "corrade_add_resource()"
    changes
-   Fixed @ref Containers::LinkedList::move() called on an item itself

## Deprecated APIs

-   @ref Containers::ArrayReference is deprecated, use the shorter
    @ref Containers::ArrayView name instead
-   @ref Containers::Array::zeroInitialized() is deprecated, use
    @ref Containers::Array::Array(ValueInitT, std::size_t) instead
-   @ref Containers::Array::from() is deprecated, use
    @ref Containers::Array::Array(InPlaceInitT, std::initializer_list<T>)
    instead
-   @ref Utility::Arguments::setHelpKey() is deprecated as its functionality
    was merged into @ref Utility::Arguments::setHelp()
-   @ref Utility::Debug::setOutput() is deprecated and superseded by scoped
    output, see @ref Utility::Debug class documentation for more information
-   @ref Utility::sleep() is deprecated, use @ref Utility::System::sleep()
    instead
-   `CORRADE_*_LIBRARIES`, `CORRADE_*_INCLUDE_DIRS` and `CORRADE_RC_EXECUTABLE`
    CMake variables are deprecated in favor of `Corrade::*` imported targets,
    `CORRADE_CXX_FLAGS` is deprecated in favor of `CORRADE_CXX_STANDARD` and
    `CORRADE_USE_PEDANTIC_FLAGS` properties. See @ref corrade-cmake for more
    information.

## Potential compatibility breakages, removed APIs

-   @ref PluginManager::AbstractPlugin now takes plugin name via `const&`
    instead of by-value
-   Reversed parameter order of @ref CORRADE_EXPECT_FAIL_IF() to be more
    intuitive
-   The `Utility::Debug::setFlags()` function was removed, use
    @ref Utility::Debug::nospace and @ref Utility::Debug::noNewlineAtTheEnd()
    instead
-   The @ref Utility::Directory, @ref Utility::String and @ref Utility::Unicode
    classes are now a namespace (might break `using` declarations, but
    otherwise it's fully source-compatible)
-   @ref corrade-cmake-add-test "corrade_add_test()" CMake macro now calls
    `target_link_libraries()` with explicit `PRIVATE` keyword, meaning the
    users also have to specify `PUBLIC`/`PRIVATE`/`INTERFACE` when calling
    `target_link_libraries()` on a test
-   All path handling functions in @ref Utility::Directory consistently return
    and expect only forward slashes as directory separators

@section corrade-changelog-2015-05 2015-05 snapshot

See the [release notes and full changelog](http://blog.magnum.graphics/announcements/may-2015-updates/#corrade).

@section corrade-changelog-2014-06 2014-06 snapshot

See the [release notes and full changelog](http://blog.magnum.graphics/announcements/june-2014-updates/#corrade).

@section corrade-changelog-2014-01 2014-01 snapshot

See the [release notes and full changelog](http://blog.magnum.graphics/announcements/january-2014-updates/#corrade).

@section corrade-changelog-2013-10 2013-10 snapshot

See the [release notes and full changelog](http://blog.magnum.graphics/announcements/october-2013-updates/#corrade).

@section corrade-changelog-2013-08 2013-08 snapshot

See the [Magnum project announcement](http://blog.magnum.graphics/announcements/introducing-magnum/).

@section corrade-changelog-initial Initial release

See the [project announcement](http://blog.magnum.graphics/announcements/introducing-corrade/).

*/

}
